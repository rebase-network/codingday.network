{"data":{"site":{"siteMetadata":{"title":"Blockchain Tools","author":"Rebase"}},"markdownRemark":{"id":"292ca0f2-ed16-5c3b-9fe8-139fe1edeb5b","excerpt":"最终的代码可以参考：bigtree 遇到问题如果短时间搞不定，可以参考上面的代码，运行命令：app应该就能运行起来了。有个线上演示版本 https://bigtree-1258120565.cos-website.ap-beijing.myqcloud.com/游戏规则Bigtree游戏规则…","html":"<p>最终的代码可以参考：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/tree/bigtree\">bigtree</a> 遇到问题如果短时间搞不定，可以参考上面的代码，运行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install &amp;&amp; npm start</code></pre></div>\n<p>app应该就能运行起来了。</p>\n<p>有个线上演示版本 <a href=\"https://bigtree-1258120565.cos-website.ap-beijing.myqcloud.com/\">https://bigtree-1258120565.cos-website.ap-beijing.myqcloud.com/</a></p>\n<h2>游戏规则</h2>\n<p><a href=\"./game.md\">Bigtree游戏规则</a></p>\n<h2>0 环境安装</h2>\n<h3>操作系统</h3>\n<p>推荐使用Mac或者Ubuntu。</p>\n<p>如果使用 <strong>Windows，可以使用虚拟机在Windows系统中安装一个Linux的Ubunut系统，</strong> 2种做法都可以：</p>\n<ul>\n<li>虚拟机VirtualBox官网下载 <a href=\"https://www.virtualbox.org/wiki/Downloads\">https://www.virtualbox.org/wiki/Downloads</a>，并安装ubunut镜像。</li>\n<li>开启 Windows 10 的 Linux 子系统并安装Ubunut镜像，切记是Windows10，不是Windows8，也不是Windows7，版本不能低于Window10，参考： <a href=\"https://www.jianshu.com/p/UpwXzQ\">https://www.jianshu.com/p/UpwXzQ</a>。</li>\n</ul>\n<h3>安装node</h3>\n<p>直接下载<a href=\"https://nodejs.org/\">Node.js</a></p>\n<p>如果熟悉命令行，可以用 <a href=\"https://github.com/creationix/nvm\">nvm</a> 安装Node.js</p>\n<p>命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\nnvm install v10.15.0 # 安装v10.15.0版本的nodejs</code></pre></div>\n<p>安装完之后，把npm的官方源替换为淘宝源，国内使用淘宝源下载速度会更快。</p>\n<p><code class=\"language-text\">npm config set registry http://registry.npm.taobao.org/</code></p>\n<h3>安装代码编辑器 vscode 稳定版，即Stable版</h3>\n<p>下载<a href=\"https://code.visualstudio.com/\">Visual Studio Code稳定版</a></p>\n<h2>1 创建项目</h2>\n<p>在命令行运行如下命令，安装 create-react-app 工具：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install create-react-app -g # g是global的缩写，即全局的意思</code></pre></div>\n<p><strong>教练</strong>：解释一下什么是npm和package？</p>\n<p>##########################成功日志##########################</p>\n<p>Success! Created bigtree at ~/bigtree\nInside that directory, you can run several commands:</p>\n<p>  yarn start\n    Starts the development server.</p>\n<p>  yarn build\n    Bundles the app into static files for production.</p>\n<p>  yarn test\n    Starts the test runner.</p>\n<p>  yarn eject\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you can’t go back!</p>\n<p>We suggest that you begin by typing:</p>\n<p>  cd bigtree\n  yarn start</p>\n<p>Happy hacking!</p>\n<p>##########################成功日志##########################</p>\n<p>在命令行运行如下命令，创建项目：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create-react-app bigtree</code></pre></div>\n<p>会创建一个名为bigtree的项目文件夹</p>\n<p><strong>教练</strong>：解释一下上面都做了什么？</p>\n<p>在命令行中运行如下命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd bigtree\nnpm install @cryptape/cita-sdk --save</code></pre></div>\n<p>##########################成功日志##########################</p>\n<ul>\n<li>@cryptape/cita-sdk@0.23.0</li>\n</ul>\n<p>added 366 packages from 306 contributors, removed 426 packages, updated 1286 packages in 194.168s\nfound 2 high severity vulnerabilities</p>\n<p>##########################成功日志##########################</p>\n<p>如果有如下错误提示：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm ERR! code ELiFECYCLE\nnpm ERR! errno 1\nnpm ERR! scrypt@6.0.3 install: `node-gyp rebuild`\nnpm ERR! Exit status 1</code></pre></div>\n<p>请看<a href=\"./qa.md\">node-gyp安装问题</a></p>\n<p>执行<code class=\"language-text\">npm start</code>，几秒钟后会自动打开一个网页 <code class=\"language-text\">http://localhost:3000/</code>，表明项目初始化并运行成功。</p>\n<p><strong>教练</strong>：介绍一下什么是React和HTML有什么关系？</p>\n<h2>2 申请测试链代币</h2>\n<h3>生成账户</h3>\n<p>访问网址获取私钥和地址：\n<a href=\"http://nervosbj.org/tools/eth-key.html\">http://nervosbj.org/tools/eth-key.html</a></p>\n<p><img src=\"./example/img/eth-key.png\"></p>\n<p>将生成的私钥和地址保存好，后面会用到。</p>\n<p><strong>不要将这里获取的私钥跟地址，当自己的钱包地址用来接收交易</strong>\n<strong>不要将这里获取的私钥跟地址，当自己的钱包地址用来接收交易</strong>\n<strong>不要将这里获取的私钥跟地址，当自己的钱包地址用来接收交易</strong></p>\n<p>特别注意，私钥 privateKey 是不能泄露给任何人的。上面这个账户就是临时用一下，所以无所谓了。\n于是，account 就到手了。</p>\n<p><strong>教练</strong>：\n解释一下什么是加密货币钱包？\n地址和私钥是什么？\n为什么私钥很重要？</p>\n<p>参考：<a href=\"https://learning.nervos.org/nerv-first/6-wallet\">https://learning.nervos.org/nerv-first/6-wallet</a></p>\n<h3>充值</h3>\n<p>使用浏览器打开网页 <a href=\"https://dapp.cryptape.com/faucet/\">https://dapp.cryptape.com/faucet/</a>)，然后输入上一步得到的地址(address)，点击 <em>Get Testnet Token</em>\n按钮就可以获取免费的代币了。</p>\n<p><img src=\"https://img.haoqicat.com/2018091201.jpg\" alt=\"图片\"></p>\n<p>然后，到 AppChain 的区块链浏览器，也就是 <a href=\"http://microscope.cryptape.com/\">microscope.cryptape.com</a> 上，输入账户地址（address），就可以查询到账户余额了。</p>\n<p>这样账户中就有了余额，后续操作就都可以顺利进行了。</p>\n<p><img src=\"https://img.haoqicat.com/2018091202.jpg\" alt=\"图片\"></p>\n<p><strong>教练</strong>：解释一下什么是Nervos？解释一下什么是区块链浏览器？</p>\n<p>参考：<a href=\"https://learning.nervos.org/nerv-first/2-nervos\">https://learning.nervos.org/nerv-first/2-nervos</a>\nNervos 是一个网络，分上下两层，底层的 CKB 负责安全和共识，上层的各种方案保证性能。Nervos 要为各个企业搭建自己的公链和开发 DApp 提供成套的基础设施，让大家直接上手就能实现自己的想法，而不必重新造轮子。</p>\n<h2>3 部署智能合约</h2>\n<p>使用代码编辑器打开创建的bigtree文件夹，在文件夹src/下创建一个文件config.js，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const config = {\n  chain: &#39;https://node.cryptape.com&#39;,\n  contractAddress: &#39;&#39;, // 暂时留空，后面会添加\n  fromAddress: &#39;YOUR_ADDRESS&#39;,\n  privateKey: &#39;YOUR_PRIVATE_KEY&#39;\n}\nmodule.exports = config</code></pre></div>\n<p>将fromAddress, privateKey(私钥)替换成自己的，contractAddress在后面部署合约成功后再添加。</p>\n<p>这样配置文件就写好了。</p>\n<p>在文件夹 <code class=\"language-text\">src/</code>下创建一个文件 <code class=\"language-text\">nervos.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const {\n  default: Nervos\n} = require(&#39;@cryptape/cita-sdk&#39;)\n\nconst config = require(&#39;./config&#39;)\n\nconst nervos = Nervos(config.chain) // config.chain indicates that the address of Appchain to interact\nconst account = nervos.base.accounts.privateKeyToAccount(config.privateKey) //create account by private key from config\n\nnervos.base.accounts.wallet.add(account)\n\nmodule.exports = nervos</code></pre></div>\n<p>创建 nervos.js 文件，初始化 nervos 对象。通过使用<code class=\"language-text\">config.chain</code>，指定了要跟哪条区块链进行交互。privateKeyToAccount 用私钥生成 account。\n通过 wallet.add 接口把 account 添加到了 nervos 对象中并最终导出。</p>\n<p>在文件夹<code class=\"language-text\">src/</code>下创建一个文件<code class=\"language-text\">simpleStore.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;./nervos&#39;)\nconst {\n  abi\n} = require(&#39;./contracts/compiled.js&#39;)\nconst {\n  contractAddress\n} = require(&#39;./config&#39;)\n\nconst transaction = require(&#39;./contracts/transaction&#39;)\nconst simpleStoreContract = new nervos.base.Contract(abi, contractAddress)\nmodule.exports = {\n  transaction,\n  simpleStoreContract\n}</code></pre></div>\n<p><strong>合约的编译：</strong>\n<strong>注意：编译器版本选择0.4.26，最新的编译器版本会有问题。</strong></p>\n<p>打开网址 <a href=\"https://remix.ethereum.org/\">https://remix.ethereum.org/</a> 将下面的代码粘贴到remix的代码编辑区域中，</p>\n<p><strong>获取合约代码：</strong><br>\n从这个网址得到：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/combined.sol\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/combined.sol</a></p>\n<p><strong>教练</strong>：介绍一下智能合约和Solidity？</p>\n<p>参考：\n<a href=\"https://learning.nervos.org/nerv-first/3-dev\">https://learning.nervos.org/nerv-first/3-dev</a>\n<a href=\"https://learning.nervos.org/nerv-first/4-sol\">https://learning.nervos.org/nerv-first/4-sol</a></p>\n<p><img src=\"./example/img/remix.png\" alt=\"图片\"></p>\n<p>然后点右侧的 start to compile进行编译。这里需要注意，有的时候需要稍微提高一下合约声明的版本号，才能编译通过。</p>\n<p><img src=\"./example/img/remix-detail.png\" alt=\"图片\"></p>\n<p>编译的输出可以通过点 details 按钮得到，这样合约就编译好了。</p>\n<p>在文件夹<code class=\"language-text\">src/</code>下创建文件夹<code class=\"language-text\">contracts</code>，然后再文件夹中创建一个文件<code class=\"language-text\">compiled.js</code>，并添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// deploy/compiled.js\nconst bytecode = &#39;稍后替换成真正的值&#39;\nconst abi = &#39;稍后替换成真正的值&#39;\nmodule.exports = {\n    abi,\n    bytecode\n}</code></pre></div>\n<p>其中 bytecode 一项，就是 remix 最终编译结果中 bytecode 一项下的 <strong>object 那个字段的值</strong>，\n是一个长长的字符串，这点要注意，不要把全部内容都复制过来。如下图所示，就是 “6080…” 开始的这个双引号中的值。</p>\n<p><img src=\"./example/img/bytecode.png\" alt=\"图片\"></p>\n<p>而 abi 一项就是一个数组，就直接在 remix 界面中的 abi 一项下，直接点 copy 图标。</p>\n<p><img src=\"./example/img/copy.png\" alt=\"图片\"></p>\n<p>然后把拷贝到的内容粘贴到 compiled.js 文件中即可。</p>\n<p>我在 Github 上也上传了一个真实可用的版本供大家参考：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/contracts/compiled.js\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/contracts/compiled.js</a> 。</p>\n<p>在文件夹<code class=\"language-text\">src/contracts/</code>下创建一个文件<code class=\"language-text\">transaction.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;../nervos&#39;)\n\nconst transaction = {\n  from: nervos.base.accounts.wallet[0].address,\n  privateKey: nervos.base.accounts.wallet[0].privateKey,\n  nonce: 999999,\n  quota: 1000000 * 10,\n  chainId: 1,\n  version: 1,\n  validUntilBlock: 999999,\n  value: &#39;0x0&#39;\n};\n\nmodule.exports = transaction</code></pre></div>\n<p>创建 <code class=\"language-text\">transaction.js</code> 文件, from 一项指定了我们自己账户的地址。注意这里没有 to 也就是没有接收方。privateKey 一项用来指定私钥。\n<strong>特别说明一下，私钥是不能暴露给任何人的，这里为了演示方便，我们直接把私钥写到了代码中，但是实际的 DApp 一般都是开源软件，所以私钥是不能写到代码中的。</strong>\nAppChain 的解决方式是把私钥保存到 Neuron 钱包中，需要进行交易的时候，让代码跟 Neuron 交互来完成签名。\n当然，我们这里先不涉及 Neuron ，暂时把私钥写到了代码中。value 是交易数额，这里设置为0。\n后面的 quota，nonce ，chainId ，version ，validUntilBlock 都是跟交易安全相关的设置，可以到 CITA 的官方文档上，\n找到各自的含义：<a href=\"https://docs.citahub.com/zh-CN/cita/configuration/service-config#rpc%E3%80%82\">https://docs.citahub.com/zh-CN/cita/configuration/service-config#rpc。</a></p>\n<p>在文件夹<code class=\"language-text\">src/contracts/</code>下创建一个文件<code class=\"language-text\">deploy.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;../nervos&#39;)\nconst {\n  abi,\n  bytecode\n} = require(&#39;./compiled.js&#39;)\n\nconst transaction = require(&#39;./transaction&#39;)\nlet _contractAddress = &#39;&#39;\n// contract contract instance\nconst myContract = new nervos.base.Contract(abi)\n\nnervos.base.getBlockNumber().then(current =&gt; {\n    transaction.validUntilBlock = +current + 88 // update transaction.validUntilBlock\n    // deploy contract\n    return myContract.deploy({\n      data: bytecode,\n      arguments: [],\n    }).send(transaction)\n  }).then(txRes =&gt; {\n    if (txRes.hash) {\n      // get transaction receipt\n      return nervos.listeners.listenToTransactionReceipt(txRes.hash)\n    } else {\n      throw new Error(&quot;No Transaction Hash Received&quot;)\n    }\n  })\n  .then(res =&gt; {\n    const {\n      contractAddress,\n      errorMessage,\n    } = res\n    if (errorMessage) throw new Error(errorMessage)\n    console.log(`contractAddress is: ${contractAddress}`)\n    _contractAddress = contractAddress\n    return nervos.base.storeAbi(contractAddress, abi, transaction) // store abi on the chain\n  }).then(res =&gt; {\n    if (res.errorMessage) throw new Error(res.errorMessage)\n    return nervos.base.getAbi(_contractAddress, &#39;pending&#39;).then(\n      res =&gt; {\n      console.log(res)\n      console.log(`\\n\\n contractAddress is: ${_contractAddress}`)\n      }\n    ) // get abi from the chain\n  }).catch(err =&gt; console.error(err))</code></pre></div>\n<p>创建 deploy.js，用来 deploy 字节码，然后就可以从 receipt 也就是回执中，得到合约地址并打印出来。\n通过 storeAbi 接口把合约 ABI 发送到链上。具体各个接口的描述可以参考：<a href=\"https://www.npmjs.com/package/@cryptape/cita-sdk\">@cryptape/cita-sdk</a>。</p>\n<p>在命令行运行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node src/contracts/deploy.js</code></pre></div>\n<p>部署成功，可以看到打印出了合约地址和 ABI 信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n...\n...\n\ncontractAddress is: 0xccDDFf1d5a0b3A412Dd1eD97Dbf661cb4E30f732</code></pre></div>\n<p>然后打开连接 <a href=\"https://microscope.cryptape.com/\">https://microscope.cryptape.com/</a> 搜索打印出的合约地址，发现出现的是一个 Account，\n下面有 Contract Panel 一项。点开，可以看到合约代码中对应的接口的相关界面。</p>\n<p><img src=\"./example/img/abi.png\"></p>\n<p>打开<code class=\"language-text\">src/config.js</code>文件，修改<code class=\"language-text\">contractAddress</code> 的值为上面得到的合约地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const config = {\n  chain: &#39;https://node.cryptape.com&#39;,\n  contractAddress: &#39;上面得到的合约地址&#39;,  // 修改这一行\n  fromAddress: &#39;YOUR_ADDRESS&#39;,\n  privateKey: &#39;YOUR_PRIVATE_KEY&#39;\n}\nmodule.exports = config</code></pre></div>\n<p>这样我们合约部分的代码就完成了。</p>\n<h2>4 与合约交互</h2>\n<p>添加需要用到的npm package</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-countdown-now --save\nnpm install autoscroll-react --save</code></pre></div>\n<p>清空<code class=\"language-text\">src/App.js</code>文件内容，将 <a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/App.js\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/App.js</a> 复制代码到这个文件。</p>\n<p>清空<code class=\"language-text\">src/App.css</code>文件内容，将 <a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/App.css\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/bigtree/src/App.css</a> 复制代码到这个文件</p>\n<p>额外需要添加的文件夹： <strong>手动复制</strong></p>\n<p><code class=\"language-text\">src/images</code>\n<code class=\"language-text\">public/images</code>\n<code class=\"language-text\">src/app</code></p>\n<p>回到浏览器中，刷新页面，如下图所示，就可以游戏了。</p>\n<p><img src=\"./example/img/bigtree.png\" alt=\"图片\"></p>\n<p>恭喜你，完成了一个完整的DApp！</p>","frontmatter":{"title":"New Beginnings","date":null,"description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/big-tree-game/","previous":null,"next":{"fields":{"slug":"/first-forever/"},"frontmatter":{"title":"First Forever"}}}}