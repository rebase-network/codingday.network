{"data":{"site":{"siteMetadata":{"title":"Coding Day","author":"Rebase"}},"markdownRemark":{"id":"64ab6821-358e-5bc5-8e7c-f7167f74c93f","excerpt":"最终的代码可以参考：first-forever-simplified 遇到问题如果短时间搞不定，可以参考上面的代码，运行命令：应该就可以将app跑起来了。0 环境安装操作系统推荐使用Mac或者Ubuntu。如果使用 Windows，可以使用虚拟机在Windows系统中安装一个Linux的Ubunut系统，…","html":"<p>最终的代码可以参考：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified\">first-forever-simplified</a> 遇到问题如果短时间搞不定，可以参考上面的代码，运行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install &amp;&amp; npm start</code></pre></div>\n<p>应该就可以将app跑起来了。</p>\n<h2>0 环境安装</h2>\n<h3>操作系统</h3>\n<p>推荐使用Mac或者Ubuntu。</p>\n<p>如果使用 <strong>Windows，可以使用虚拟机在Windows系统中安装一个Linux的Ubunut系统，</strong> 2种做法都可以：</p>\n<ul>\n<li>虚拟机VirtualBox官网下载 <a href=\"https://www.virtualbox.org/wiki/Downloads\">https://www.virtualbox.org/wiki/Downloads</a>，并安装ubunut镜像。</li>\n<li>开启 Windows 10 的 Linux 子系统并安装Ubunut镜像，切记是Windows10，不是Windows8，也不是Windows7，版本不能低于Window10，参考： <a href=\"https://www.jianshu.com/p/UpwXzQ\">https://www.jianshu.com/p/UpwXzQ</a>。</li>\n</ul>\n<h3>安装node</h3>\n<p>直接下载<a href=\"https://nodejs.org/\">Node.js</a></p>\n<p>如果熟悉命令行，可以用 <a href=\"https://github.com/creationix/nvm\">nvm</a> 安装Node.js</p>\n<p>命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\nnvm install v10.15.0 # 安装v10.15.0版本的nodejs</code></pre></div>\n<p>安装完之后，把npm的官方源替换为淘宝源，国内使用淘宝源下载速度会更快。</p>\n<p><code class=\"language-text\">npm config set registry http://registry.npm.taobao.org/</code></p>\n<h3>安装代码编辑器 vscode 稳定版，即Stable版</h3>\n<p><a href=\"https://code.visualstudio.com/\">visual studio</a></p>\n<h2>1 创建项目</h2>\n<p>在命令行运行如下命令，安装 create-react-app 工具：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install create-react-app -g # g是global的缩写，即全局的意思</code></pre></div>\n<p><strong>教练</strong>：解释一下什么是npm和package？上面的命令做了什么？</p>\n<p>在命令行运行如下命令，创建项目：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create-react-app first-forever</code></pre></div>\n<p>会创建一个名字为first-forever的项目文件夹</p>\n<p><strong>教练</strong>：解释一下上面都做了什么？</p>\n<p>在命令行运行如下命令，运行项目：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd first-forever\nnpm install @cryptape/cita-sdk --save</code></pre></div>\n<p>如果有错误提示， 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm ERR! code ELiFECYCLE\nnpm ERR! errno 1\nnpm ERR! scrypt@6.0.3 install: `node-gyp rebuild`\nnpm ERR! Exit status 1</code></pre></div>\n<p>请看<a href=\"./qa.md\">node-gyp安装问题</a></p>\n<p>执行<code class=\"language-text\">npm start</code>，几秒钟后会自动打开一个网页 <code class=\"language-text\">http://localhost:3000/</code>，表明项目初始化并运行成功。</p>\n<p><strong>教练</strong>：介绍一下一个网页从输入网址到显示内容都经历了什么？介绍一下什么是React和HTML有什么关系？</p>\n<h2>2 申请测试链代币</h2>\n<h3>生成账户</h3>\n<p>访问网址获取私钥和地址：</p>\n<p><a href=\"https://service-exvd0ctl-1258120565.ap-beijing.apigateway.myqcloud.com/release/addr\">genEthAddr</a></p>\n<p>将生成的私钥和地址保存好，后面会用到。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">不要将这里获取的私钥跟地址，当自己的钱包地址用来存币\n不要将这里获取的私钥跟地址，当自己的钱包地址用来存币\n不要将这里获取的私钥跟地址，当自己的钱包地址用来存币</code></pre></div>\n<p>特别注意，私钥 privateKey 是不能泄露给任何人的。上面这个账户就是临时用一下，所以无所谓了。\n于是，account 就到手了。</p>\n<p><strong>教练</strong>：\n解释一下什么是加密货币钱包？\n冷钱包和热钱包有啥区别？\n地址和私钥是什么？\n为什么私钥很重要？</p>\n<p>参考：<a href=\"https://learning.nervos.org/nerv-first/6-wallet\">https://learning.nervos.org/nerv-first/6-wallet</a></p>\n<h3>充值</h3>\n<p>使用浏览器打开网页 <a href=\"https://dapp.cryptape.com/faucet/\">https://dapp.cryptape.com/faucet/</a> ，然后输入上一步生成的地址(address)，点击 <em>Get Testnet Token</em> 按钮就可以获取免费的代币了。</p>\n<p><img src=\"https://img.haoqicat.com/2018091201.jpg\" alt=\"图片\"></p>\n<p>然后，到 AppChain 的区块链浏览器，也就是 <a href=\"http://microscope.cryptape.com/\">microscope.cryptape.com</a> 上，输入账户地址（address），就可以查询到账户余额了，数值是 0x 打头的，也就是8进制表示的。</p>\n<p>这样账户中就有了余额，后续操作就都可以顺利进行了。</p>\n<p><img src=\"https://img.haoqicat.com/2018091202.jpg\" alt=\"图片\"></p>\n<p><strong>教练</strong>：解释一下什么是Nervos？解释一下什么是区块链浏览器？</p>\n<p>参考：<a href=\"https://learning.nervos.org/nerv-first/2-nervos\">https://learning.nervos.org/nerv-first/2-nervos</a>\nNervos 是一个网络，分上下两层，底层的 CKB 负责安全和共识，上层的各种方案保证性能。Nervos 要为各个企业搭建自己的公链和开发 DApp 提供成套的基础设施，让大家直接上手就能实现自己的想法，而不必重新造轮子。</p>\n<h2>3 部署智能合约</h2>\n<p>使用代码编辑器打开创建的first-forever文件夹，在文件夹src/下创建一个文件config.js，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const config = {\n  chain: &#39;https://node.cryptape.com&#39;,\n  contractAddress: &#39;&#39;, // 暂时留空，后面会添加\n  fromAddress: &#39;YOUR_ADDRESS&#39;,\n  privateKey: &#39;YOUR_PRIVATE_KEY&#39;\n}\nmodule.exports = config</code></pre></div>\n<p>将fromAddress, privateKey(私钥)替换成自己的，contractAddress在后面部署合约成功后再添加。</p>\n<p>这样配置文件就写好了。</p>\n<p>在文件夹 <code class=\"language-text\">src/</code>下创建一个文件 <code class=\"language-text\">nervos.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const {\n  default: Nervos\n} = require(&#39;@cryptape/cita-sdk&#39;)\n\nconst config = require(&#39;./config&#39;)\n\nconst nervos = Nervos(config.chain) // config.chain indicates that the address of Appchain to interact\nconst account = nervos.base.accounts.privateKeyToAccount(config.privateKey) //create account by private key from config\n\nnervos.base.accounts.wallet.add(account)\n\nmodule.exports = nervos</code></pre></div>\n<p>创建 nervos.js 文件，初始化 nervos 对象。通过使用 config.chain ，指定了要跟哪条区块链进行交互。privateKeyToAccount 用私钥生成 account。\n通过 wallet.add 接口把 account 添加到了 nervos 对象中并最终导出。</p>\n<p>在文件夹<code class=\"language-text\">src/</code>下创建一个文件<code class=\"language-text\">simpleStore.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;./nervos&#39;)\nconst {\n  abi\n} = require(&#39;./contracts/compiled.js&#39;)\nconst {\n  contractAddress\n} = require(&#39;./config&#39;)\n\nconst transaction = require(&#39;./contracts/transaction&#39;)\nconst simpleStoreContract = new nervos.base.Contract(abi, contractAddress)\nmodule.exports = {\n  transaction,\n  simpleStoreContract\n}</code></pre></div>\n<p>打开网址 <a href=\"https://remix.ethereum.org/\">https://remix.ethereum.org/</a> 将下面的代码粘贴到remix的代码编辑区域中，代码也可以从这个网址得到：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/master/src/contracts/SimpleStore.sol\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/master/src/contracts/SimpleStore.sol</a></p>\n<p><strong>教练</strong>：介绍一下智能合约和Solidity？Solidity有哪些优点更适合做智能合约开发？</p>\n<p>参考：<a href=\"https://learning.nervos.org/nerv-first/3-dev\">https://learning.nervos.org/nerv-first/3-dev</a>\n<a href=\"https://learning.nervos.org/nerv-first/4-sol\">https://learning.nervos.org/nerv-first/4-sol</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pragma solidity ^0.4.24; // 版本等于0.4.24才可以编译\n\ncontract SimpleStore {\n    mapping (address =&gt; mapping (uint256 =&gt; string)) private records;\n    /*\n        mapping类型 理解为字典\n        0x81acb7ffda65c125646ac9b8d98cf47c170c01a9 =&gt; {1231006505 =&gt; &quot;The Times 03/Jan/2009 Chancellor on brink of second bailout for banks&quot;}\n     */\n\n    mapping (address =&gt; uint256[]) private categories;\n    /*\n        0x81acb7ffda65c125646ac9b8d98cf47c170c01a9 =&gt; 235833\n        0x398ca5cf715201c8c3ebf301ce8f0ed577a3f258 =&gt; 623735\n    */\n\n    event Recorded(address _sender, string indexed _text, uint256 indexed _time); // 定义事件\n\n    function _addToList(address from, uint256 time) private { // 私有方法\n        categories[from].push(time); // mapping 添加一个元素\n    }\n\n    function getList()\n    public // public是公共方法\n    view // view 表示这个查询方法,不改变数据的状态\n    returns (uint256[])// 返回的数据类型\n    {\n        return categories[msg.sender];\n    }\n\n    function add(string text, uint256 time) public { // 公共方法, 外部可以调用\n        records[msg.sender][time]=text; // 赋值\n        _addToList(msg.sender, time); // 调用方法\n        emit Recorded(msg.sender, text, time); // 触发事件\n    }\n\n    function get(uint256 time) public view returns(string) { // 公共方法, 外部可以调用\n        return records[msg.sender][time];\n    }\n}</code></pre></div>\n<p><img src=\"https://uploader.shimo.im/f/wTAoWHk5oEQ2NjW9.png!thumbnail\" alt=\"图片\"></p>\n<p>然后点右侧的 start to compile进行编译。这里需要注意，有的时候需要稍微提高一下合约声明的版本号，才能编译通过。</p>\n<p><img src=\"https://img.haoqicat.com/2018091204.jpg\" alt=\"图片\"></p>\n<p>编译的输出可以通过点 details 按钮得到。\n这样合约就编译好了。</p>\n<p>在文件夹<code class=\"language-text\">src/</code>下创建文件夹<code class=\"language-text\">contracts</code>，然后再文件夹中创建一个文件<code class=\"language-text\">compiled.js</code>，并添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// deploy/compiled.js\nconst bytecode = &#39;稍后替换成真正的值&#39;\nconst abi = &#39;稍后替换成真正的值&#39;\nmodule.exports = {\n    abi,\n    bytecode\n}</code></pre></div>\n<p>其中 bytecode 一项，就是 remix 最终编译结果中 bytecode 一项下的 <strong>object 那个字段的值</strong>，\n是一个长长的字符串，这点要注意，不要把全部内容都复制过来。如下图所示，就是 “6080…” 开始的这个双引号中的值。</p>\n<p><img src=\"https://uploader.shimo.im/f/h0FDy0TqDgAGu6nk.png!thumbnail\" alt=\"图片\"></p>\n<p>而 abi 一项就是一个数组，就直接在 remix 界面中的 abi 一项下，直接点 copy 图标。</p>\n<p><img src=\"https://uploader.shimo.im/f/iDx1G9x7pTUlqqWq.png!thumbnail\" alt=\"图片\"></p>\n<p>然后把拷贝到的内容粘贴到 compiled.js 文件中即可。</p>\n<p>我在 Github 上也上传了一个真实可用的版本供大家参考：<a href=\"https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/master/src/contracts/compiled.js\">https://github.com/NervosBeijingCommunity/first-forever-simplified/blob/master/src/contracts/compiled.js</a> 。</p>\n<p>在文件夹<code class=\"language-text\">src/contracts/</code>下创建一个文件<code class=\"language-text\">transaction.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;../nervos&#39;)\n\nconst transaction = {\n  from: nervos.base.accounts.wallet[0].address,\n  privateKey: nervos.base.accounts.wallet[0].privateKey,\n  nonce: 999999,\n  quota: 1000000,\n  chainId: 1,\n  version: 1,\n  validUntilBlock: 999999,\n  value: &#39;0x0&#39;\n};\n\nmodule.exports = transaction</code></pre></div>\n<p>创建 <code class=\"language-text\">transaction.js</code> 文件, from 一项指定了我们自己账户的地址。注意这里没有 to 也就是没有接收方。privateKey 一项用来指定私钥。<strong>特别说明一下，私钥是不能暴露给任何人的，这里为了演示方便，我们直接把私钥写到了代码中，但是实际的 DApp 一般都是开源软件，所以私钥是不能写到代码中的。</strong>\nAppChain 的解决方式是把私钥保存到 Neuron 钱包中，需要进行交易的时候，让代码跟 Neuron 交互来完成签名。\n当然，我们这里还是先不涉及 Neuron ，暂时把私钥写到了代码中。value 是交易数额，这里设置为0。\n后面的 quota，nonce ，chainId ，version ，validUntilBlock 都是跟交易安全相关的设置，可以到 AppChain 的核心，也就是 CITA 的官方文档上，找到各自的含义：<a href=\"https://docs.nervos.org/cita/#/rpc_guide/rpc\">https://docs.nervos.org/cita/#/rpc_guide/rpc</a>。</p>\n<p>在文件夹<code class=\"language-text\">src/contracts/</code>下创建一个文件<code class=\"language-text\">deploy.js</code>，添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const nervos = require(&#39;../nervos&#39;)\nconst {\n  abi,\n  bytecode\n} = require(&#39;./compiled.js&#39;)\n\nconst transaction = require(&#39;./transaction&#39;)\nlet _contractAddress = &#39;&#39;\n// contract contract instance\nconst myContract = new nervos.base.Contract(abi)\n\nnervos.base.getBlockNumber().then(current =&gt; {\n    transaction.validUntilBlock = +current + 88 // update transaction.validUntilBlock\n    // deploy contract\n    return myContract.deploy({\n      data: bytecode,\n      arguments: [],\n    }).send(transaction)\n  }).then(txRes =&gt; {\n    if (txRes.hash) {\n      // get transaction receipt\n      return nervos.listeners.listenToTransactionReceipt(txRes.hash)\n    } else {\n      throw new Error(&quot;No Transaction Hash Received&quot;)\n    }\n  })\n  .then(res =&gt; {\n    const {\n      contractAddress,\n      errorMessage,\n    } = res\n    if (errorMessage) throw new Error(errorMessage)\n    console.log(`contractAddress is: ${contractAddress}`)\n    _contractAddress = contractAddress\n    return nervos.base.storeAbi(contractAddress, abi, transaction) // store abi on the chain\n  }).then(res =&gt; {\n    if (res.errorMessage) throw new Error(res.errorMessage)\n    return nervos.base.getAbi(_contractAddress,&#39;pending&#39;).then(console.log) // get abi from the chain\n  }).catch(err =&gt; console.error(err))</code></pre></div>\n<p>创建 deploy.js，用来 deploy 字节码，然后就可以从 receipt 也就是回执中，得到合约地址并打印出来。\n通过 storeAbi 接口把合约 ABI 发送到链上。具体各个接口的描述可以参考 Nervos.js 的 npm 主页：<a href=\"https://www.npmjs.com/package/@cryptape/cita-sdk\">@cryptape/cita-sdk</a>。</p>\n<p>在命令行运行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node src/contracts/deploy.js</code></pre></div>\n<p>部署成功，可以看到打印出了合约地址和 ABI 信息。</p>\n<p>然后打开连接 <a href=\"https://microscope.cryptape.com/\">https://microscope.cryptape.com/</a> 搜索打印出的合约地址，发现出现的就是一个 Account ，下面有 contract 一项。点开，可以看到合约代码中对应的三个接口的相关界面。</p>\n<p>打开<code class=\"language-text\">src/config.js</code>文件，修改<code class=\"language-text\">contractAddress</code>的值为上面得到的合约地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const config = {\n  chain: &#39;https://node.cryptape.com&#39;,\n  contractAddress: &#39;上面得到的合约地址&#39;,  // 修改这一行\n  fromAddress: &#39;YOUR_ADDRESS&#39;,\n  privateKey: &#39;YOUR_PRIVATE_KEY&#39;\n}\nmodule.exports = config</code></pre></div>\n<p>这样我们合约部分的代码就完成了。</p>\n<h2>4 与合约交互</h2>\n<p>清空<code class=\"language-text\">src/App.js</code>文件内容，并添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// src/App.js\nimport React from &#39;react&#39;\nimport &#39;./App.css&#39;\nimport { transaction, simpleStoreContract } from &#39;./simpleStore&#39;\nimport nervos from &#39;./nervos&#39;\n\nconst Submit = ({ text = &#39;愿此刻永恒&#39;, onClick, disabled = false }) =&gt; (\n  &lt;button\n    onClick={onClick}\n    className={`confirm__button--primary ${disabled ? &#39;confirm__button--disabled&#39; : &#39;&#39;}`}\n    disabled={disabled}\n  &gt;\n    {text}\n  &lt;/button&gt;\n)\n\nconst Record = ({ time, text, hasYearLabel }) =&gt; {\n  const _time = new Date(+time);\n  const timeFormatter = time =&gt; (&#39;&#39; + time).padStart(2, &#39;0&#39;);\n\n  return (\n    &lt;div className=&quot;list__record--container&quot;&gt;\n      {hasYearLabel ? &lt;div className=&quot;list__record--year&quot;&gt;{_time.getFullYear()}&lt;/div&gt; : null}\n      &lt;span&gt;{`${_time.getMonth() + 1}-${timeFormatter(_time.getDate())} ${timeFormatter(_time.getHours())}:${timeFormatter(_time.getMinutes())}`}&lt;/span&gt;\n      &lt;div&gt;{text}&lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nconst timeFormatter = time =&gt; (&#39;&#39; + time).padStart(2, &#39;0&#39;)\n\nconst submitTexts = {\n  normal: &#39;愿此刻永恒&#39;,\n  submitting: &#39;保存中&#39;,\n  submitted: &#39;保存成功&#39;,\n}\n\nclass App extends React.Component {\n  state = {\n    text: &#39;&#39;,\n    time: new Date(),\n    submitText: submitTexts.normal,\n    errorText: &#39;&#39;,\n    times: [],\n    texts: [],\n  }\n  componentDidMount() {\n    this.fetchList();\n  }\n  handleInput = e =&gt; {\n    this.setState({ text: e.target.value })\n  }\n  handleSubmit = e =&gt; {\n    const { time, text } = this.state\n    nervos.base\n      .getBlockNumber()\n      .then(current =&gt; {\n        const tx = {\n          ...transaction,\n          validUntilBlock: +current + 88,\n        }\n        this.setState({\n          submitText: submitTexts.submitting,\n        })\n        return simpleStoreContract.methods.add(text, +time).send(tx)\n      })\n      .then(res =&gt; {\n        if (res.hash) {\n          return nervos.listeners.listenToTransactionReceipt(res.hash)\n        } else {\n          throw new Error(&#39;No Transaction Hash Received&#39;)\n        }\n      })\n      .then(receipt =&gt; {\n        if (!receipt.errorMessage) {\n          this.setState({ submitText: submitTexts.submitted })\n        } else {\n          throw new Error(receipt.errorMessage)\n        }\n      })\n      .then(() =&gt; {\n        // FIXME: seems it does not work\n        this.fetchList();\n      })\n      .catch(err =&gt; {\n        this.setState({ errorText: JSON.stringify(err) })\n      })\n  }\n  fetchList() {\n    const from = nervos.base.accounts.wallet[0] ? nervos.base.accounts.wallet[0].address : &#39;&#39;;\n    simpleStoreContract.methods\n      .getList()\n      .call({\n        from,\n      })\n      .then(times =&gt; {\n        times.reverse()\n        this.setState({ times })\n        return Promise.all(times.map(time =&gt; simpleStoreContract.methods.get(time).call({ from })))\n      })\n      .then(texts =&gt; {\n        this.setState({ texts })\n      })\n      .catch(console.error)\n  }\n  render() {\n    const { times, texts, time, text, submitText, errorText } = this.state\n    console.log(&#39;render: &#39;, texts)\n    const List = (\n      &lt;div className=&quot;list__record--page&quot;&gt;\n        {times.map((time, idx) =&gt; (\n          &lt;Record\n            time={time}\n            text={texts[idx]}\n            key={time}\n            hasYearLabel={idx === 0 || new Date(+time).getFullYear() !== new Date(+times[idx - 1]).getFullYear()}\n          /&gt;\n        ))}\n      &lt;/div&gt;\n    );\n    const Add = (\n      &lt;div className=&quot;add__content--container&quot;&gt;\n        &lt;div className=&quot;add__time--container&quot;&gt;\n          &lt;span className=&quot;add__time--year&quot;&gt;{time.getFullYear()}&lt;/span&gt;\n          :\n          &lt;span className=&quot;add__time--month&quot;&gt;{time.getMonth() + 1}&lt;/span&gt;\n          :\n          &lt;span className=&quot;add__time--day&quot;&gt;{timeFormatter(time.getDate())}&lt;/span&gt;\n          :\n          &lt;span className=&quot;add__time--hour&quot;&gt;{timeFormatter(time.getHours())}&lt;/span&gt;\n          :\n          &lt;span className=&quot;add__time--min&quot;&gt;{timeFormatter(time.getMinutes())}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div className=&quot;add__content--prompt&quot;&gt;\n          &lt;span&gt;把你觉得重要的一刻，存放在链上，永远保存，随时查看&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;textarea\n          cols=&quot;32&quot;\n          rows=&quot;10&quot;\n          className=&quot;add__content--textarea&quot;\n          placeholder=&quot;留下你的时光吧...&quot;\n          onChange={this.handleInput}\n          value={text}\n        /&gt;\n        &lt;Submit text={submitText} onClick={this.handleSubmit} disabled={submitText !== submitTexts.normal} /&gt;\n        {errorText &amp;&amp; &lt;span className=&quot;warning&quot;&gt;{errorText}&lt;/span&gt;}\n      &lt;/div&gt;\n    )\n    return (\n      &lt;div&gt;\n        {Add}\n        {List}\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default App</code></pre></div>\n<p>清空<code class=\"language-text\">src/App.css</code>文件内容，并添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// src/App.css\n.add__content--container {\n  padding: 0 15px;\n}\n\n.add__content--container&gt;div,\n.add__content--container&gt;input,\n.add__content--container&gt;textarea,\n.add__content--container&gt;button {\n  margin: 15px 0;\n}\n\n.add__content--container&gt;textarea {\n  margin-bottom: 31px;\n}\n\n.add__content--container&gt;div {\n  margin-bottom: 0;\n}\n\n.add__time--container {\n  background: #fff;\n  border-radius: 4px;\n  text-align: center;\n  padding: 23px 0;\n  box-shadow: 0 10px 10px 0 rgba(254, 121, 43, 0.05);\n}\n\n.add__time--year,\n.add__time--month,\n.add__time--day,\n.add__time--hour,\n.add__time--min {\n  font-weight: bold;\n  border: 1px solid #e3e3e3;\n  padding: 9px 8px;\n  font-size: 22px;\n  border-radius: 4px;\n  margin: 0 6px;\n}\n\n.add__content--prompt {\n  color: #828181;\n  font-size: 12px;\n}\n\n.add__content--prompt svg {\n  margin-right: 8px;\n}\n\n.add__content--textarea {\n  display: block;\n  width: 100%;\n  border-radius: 4px;\n  border: none;\n  background: #fff;\n  box-shadow: 0 10px 10px 0 rgba(254, 121, 43, 0.05);\n  resize: none;\n  padding: 12px;\n}\n\n.add__content--pic {\n  position: relative;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 10px 10px 0 rgba(254, 121, 43, 0.05);\n  resize: none;\n  padding: 11px 18px;\n}\n\n.add__content--pic input {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.list__record--page {\n  margin: 22px;\n  border-left: 2px solid rgba(254, 121, 43, 0.2);\n  margin-bottom: 70px;\n}\n\n.list__record--container {\n  font-size: 14px;\n  margin-right: 0;\n  padding: 22px;\n}\n\n.list__record--container span {\n  position: relative;\n  color: #828181;\n  line-height: 2;\n}\n\n.list__record--container span::before {\n  display: block;\n  content: &#39;&#39;;\n  position: absolute;\n  top: 6px;\n  left: -27px;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #fb7f5b;\n  opacity: 0.5;\n}\n\n.list__record--container div {\n  background: #FFF;\n  border-radius: 4px;\n  padding: 16px 10px 20px;\n  color: #1E1E21;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-shadow: 0 10px 10px 0 rgba(254, 121, 43, 0.05);\n}\n\n.list__record--container div.list__record--year {\n  position: relative;\n  padding: 0;\n  background: none;\n  box-shadow: none;\n  overflow: visible;\n  font-size: 24px;\n  margin-bottom: 15px;\n  font-weight: 900;\n}\n\n.list__record--container div.list__record--year::before {\n  display: block;\n  content: &#39;&#39;;\n  position: absolute;\n  top: 13px;\n  left: -27px;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #fb7f5b;\n}\n\n.list__record--container div.list__record--year::after {\n  display: block;\n  content: &#39;&#39;;\n  position: absolute;\n  top: 9px;\n  left: -31px;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #fb7f5b;\n  opacity: 0.5;\n}\n\n.confirm__button--primary {\n  display: block;\n  margin: 3.8vh 0;\n  width: 100%;\n  border: none;\n  height: 44px;\n  line-height: 44px;\n  text-align: center;\n  border-radius: 4px;\n  font-size: 16px;\n  color: #fff;\n  background: #fe792b;\n  box-shadow: 0 0 10px 0 #fe792b;\n}\n\n.confirm__button--disabled {\n  color: #aaa !important;\n  background: #eee !important;\n  box-shadow: 0 0 10px 0 #eee !important;\n}</code></pre></div>\n<p>回到浏览器中，查看页面，如下图所示。这时就可以添加文字并提交到区块链了，刷新页面后就可以看到最新添加的文字了。</p>\n<p><img src=\"./example/img/finish.png\" alt=\"图片\"></p>\n<p>恭喜你，完成了一个完整的DApp！（完）</p>","frontmatter":{"title":"First Forever","date":"May 18, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/first-forever/","previous":null,"next":{"fields":{"slug":"/big-tree-game/"},"frontmatter":{"title":"Big Tree Game"}}}}